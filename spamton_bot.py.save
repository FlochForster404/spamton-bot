from telegram.ext import Updater, MessageHandler, Filters, CommandHandler
import os, random, re

# ====== Word banks for auto-generation ======
ADJECTIVES = [
    "BIG", "LIMITED", "FREE", "HOT", "VALUE", "GUARANTEED",
    "ONCE-IN-A-LIFETIME", "PREMIUM", "RISK-FREE", "SECRET",
    "MEGA", "ULTIMATE", "SPECIAL", "TRUSTED", "HYPERLINK",
    "EXCLUSIVE", "DISCOUNTED", "EXTRA", "CHEAP", "BONUS",
    "VIP", "PLATINUM", "GOLD", "CERTIFIED", "OFFICIAL"
]

NOUNS = [
    "DEAL", "CUSTOMER", "OFFER", "SALE", "MONEY", "BONUS",
    "DISCOUNT", "LOTTERY", "JACKPOT", "SAVINGS", "CASH",
    "NFT", "PRIZE", "SUBSCRIPTION", "MEMBERSHIP", "LOAN",
    "CLICK", "DOWNLOAD", "SHIPPING", "REFUND", "WARRANTY",
    "COUPON", "VOUCHER", "TRIAL", "UPGRADE", "ACCESS"
]

TECH = [
    "404 ERROR", "SYSTEM32", "ACCESS DENIED", "FILE NOT FOUND",
    "BLUE SCREEN", "MISSING DLL", "LOGIN FAILED",
    "UNREGISTERED VERSION", "BUFFER OVERFLOW", "OUT OF RANGE",
    "SIGNAL LOST", "DISK ERROR", "EXPIRED LICENSE",
    "HYPERLINK BLOCKED", "CONNECTION RESET", "TIMEOUT",
    "FIREWALL DETECTED", "PASSWORD REQUIRED"
]

MEMES = [
    "HOT SINGLE IN YOUR AREA", "CONGRATULATIONS WINNER!",
    "WE ARE SO BACK", "COOKED", "BASED", "YOU CALLED??",
    "CHA-CHING!", "MONEY MONEY MONEY", "VOID IF REMOVED",
    "TERMS AND CONDITIONS APPLY", "BATTERY NOT INCLUDED",
    "AS SEEN ON TV", "CLICK HERE", "BUY NOW", "TRY NOW",
    "NO REFUNDS", "FREE SHIPPING", "LOW PRICE", "ACT FAST"
]

SUFFIXES = [
    "!!!", "??!?!!",
    "!! Do YoU WaNNa Be A [BIG SHOT]??",
    "!!?? (pLeAse... bUy sOmEtHinG...)",
    "!!! [HYPERLINK BLOCKED]",
    "!! [LIMITED TIME OFFER]"
]

# ====== Generators ======
def generate_glitch():
    """Return one glitch like [BIG DEAL] or [BLUE SCREEN]."""
    category = random.choice([ADJECTIVES, NOUNS, TECH, MEMES])
    # 45% chance to create a 2–3 piece combo like [BIG DEAL BLUE SCREEN]
    if random.random() < 0.45:
        parts = [random.choice(ADJECTIVES), random.choice(NOUNS)]
        if random.random() < 0.35:  # maybe add a third piece
            parts.append(random.choice(TECH + MEMES))
        phrase = " ".join(parts)
    else:
        phrase = random.choice(category)
    return f"[{phrase}]"

def generate_glitch_burst(min_n=1, max_n=3):
    """Return 1–3 glitches joined with spaces, e.g. [FREE][CLICK HERE]..."""
    k = random.randint(min_n, max_n)
    return " ".join(generate_glitch() for _ in range(k))

def random_caps(s, p=0.5):
    out = []
    for c in s:
        if c.isalpha():
            out.append(c.upper() if random.random() < p else c.lower())
        else:
            out.append(c)
    return "".join(out)

# ====== Spamtonify pipeline ======
def spamtonify(text, glitch=0.30, caps=0.50, burst_min=1, burst_max=3):
    """
    glitch: chance (0..1) to replace a word with glitches
    caps: intensity (0..1) of RaNdOm CaPs
    burst_min/max: how many glitches to insert when triggered
    """
    out = []
    for w in text.split():
        if random.random() < glitch:
            out.append(generate_glitch_burst(burst_min, burst_max))
        else:
            # 20% chance to bracketize the real word
            if random.random() < 0.20:
                w = f"[{w.upper()}]"
            out.append(random_caps(w, caps))
    suffix = " " + random_caps(random.choice(SUFFIXES), 0.65)
    return " ".join(out) + suffix

# ====== Telegram handlers ======
def start_cmd(update, ctx):
    update.message.reply_text("MENTION ME, [CUSTOMER]!! I'LL SPAMTONIFY YOUR WORDS!!")

def handle_text(update, ctx):
    bot_username = ctx.bot.username.lower()
    txt = update.message.text or ""
    # Only react in groups if bot is mentioned
    if f"@{bot_username}" in txt.lower():
        # Strip the mention (case-insensitive)
        clean = re.sub(rf"@{re.escape(ctx.bot.username)}", "", txt, flags=re.IGNORECASE).strip()
        if not clean:
            clean = "HELLO"
        update.message.reply_text(spamtonify(clean))
    # In private chat (DM), reply to everything
    elif update.message.chat.type == "private":
        update.message.reply_text(spamtonify(txt))

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN env var missing")
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start_cmd))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()

from telegram.ext import Updater, MessageHandler, Filters, CommandHandler
import os, random, re

# =========================
# Tunable settings (safe defaults for "reply properly")
# =========================
GLITCH_PROB = 0.15        # 15% of words get glitched (keep most words)
CAPS_INTENSITY = 0.55     # random caps strength
BURST_PROB = 0.20         # 20% of the time a glitch inserts 2 items instead of 1
MAX_GLITCH_FRACTION = 0.30  # never replace more than 30% of the words

# ====== Word banks for auto-generation ======
ADJECTIVES = [
    "BIG","LIMITED","FREE","HOT","VALUE","GUARANTEED","ONCE-IN-A-LIFETIME",
    "PREMIUM","RISK-FREE","SECRET","MEGA","ULTIMATE","SPECIAL","TRUSTED",
    "HYPERLINK","EXCLUSIVE","DISCOUNTED","EXTRA","CHEAP","BONUS","VIP",
    "PLATINUM","GOLD","CERTIFIED","OFFICIAL"
]

NOUNS = [
    "DEAL","CUSTOMER","OFFER","SALE","MONEY","BONUS","DISCOUNT","LOTTERY",
    "JACKPOT","SAVINGS","CASH","NFT","PRIZE","SUBSCRIPTION","MEMBERSHIP",
    "LOAN","CLICK","DOWNLOAD","SHIPPING","REFUND","WARRANTY","COUPON",
    "VOUCHER","TRIAL","UPGRADE","ACCESS"
]

TECH = [
    "HYPERLINK BLOCKED","404 ERROR","SYSTEM32","ACCESS DENIED","FILE NOT FOUND",
    "BLUE SCREEN","MISSING DLL","LOGIN FAILED","UNREGISTERED VERSION",
    "BUFFER OVERFLOW","OUT OF RANGE","SIGNAL LOST","DISK ERROR","EXPIRED LICENSE",
    "CONNECTION RESET","TIMEOUT","FIREWALL DETECTED","PASSWORD REQUIRED"
]

MEMES = [
    "HOT SINGLE IN YOUR AREA","CONGRATULATIONS WINNER!","WE ARE SO BACK","COOKED",
    "BASED","YOU CALLED??","CHA-CHING!","MONEY MONEY MONEY","VOID IF REMOVED",
    "TERMS AND CONDITIONS APPLY","BATTERY NOT INCLUDED","AS SEEN ON TV",
    "CLICK HERE","BUY NOW","TRY NOW","NO REFUNDS","FREE SHIPPING","LOW PRICE","ACT FAST"
]

SUFFIXES = [
    "!!!",
    "??!?!!",
    "!! Do YoU WaNNa Be A [BIG SHOT]??",
    "!!?? (pLeAse... bUy sOmEtHinG...)",
    "!!! [HYPERLINK BLOCKED]",
    "!! [LIMITED TIME OFFER]",
]

# ====== Helpers / Generators ======
def random_caps(s, p=CAPS_INTENSITY):
    out = []
    for c in s:
        if c.isalpha():
            out.append(c.upper() if random.random() < p else c.lower())
        else:
            out.append(c)
    return "".join(out)

def generate_glitch():
    """Return one glitch like [BIG DEAL] or [BLUE SCREEN]."""
    # 45% chance to create a 2–3 piece combo like [BIG DEAL BLUE SCREEN]
    if random.random() < 0.45:
        parts = [random.choice(ADJECTIVES), random.choice(NOUNS)]
        if random.random() < 0.35:
            parts.append(random.choice(TECH + MEMES))
        phrase = " ".join(parts)
    else:
        # pick a single category word
        phrase = random.choice(random.choice([ADJECTIVES, NOUNS, TECH, MEMES]))
    return f"[{phrase}]"

def generate_glitch_burst():
    """Return 1 or 2 glitches (bursts rarer so replies stay readable)."""
    k = 2 if random.random() < BURST_PROB else 1
    return " ".join(generate_glitch() for _ in range(k))

# ====== Core Spamtonify (keeps your sentence readable) ======
def spamtonify(text, glitch=GLITCH_PROB, caps=CAPS_INTENSITY):
    words = text.split()
    n = len(words)
    if n == 0:
        return random_caps("HELLO") + " " + random_caps(random.choice(SUFFIXES), 0.65)

    # Never replace first/last word; keep structure recognizable
    keep_indices = {0, n - 1}

    # Hard cap on how many words we’re allowed to replace
    max_replace = max(1, int(n * MAX_GLITCH_FRACTION))
    replaced = 0

    out_tokens = []
    for i, w in enumerate(words):
        # Decide if we should glitch this word
        should_glitch = (
            (i not in keep_indices) and
            (random.random() < glitch) and
            (replaced < max_replace)
        )
        if should_glitch:
            out_tokens.append(generate_glitch_burst())
            replaced += 1
        else:
            # 15%: bracketize the real word for flavor, else just random-caps it
            if random.random() < 0.15:
                core = re.sub(r"^\W+|\W+$", "", w).upper()
                if core:
                    w = w.replace(core, f"[{core}]")
            out_tokens.append(random_caps(w, caps))

    suffix = " " + random_caps(random.choice(SUFFIXES), 0.65)
    return " ".join(out_tokens) + suffix

# ====== Telegram Handlers ======
def start_cmd(update, ctx):
    update.message.reply_text("MENTION ME IN GROUPS, [CUSTOMER]!! I’ll keep your words & add a sweet [DEAL]!!")

def handle_text(update, ctx):
    bot_username = ctx.bot.username.lower()
    txt = update.message.text or ""
    chat_type = update.message.chat.type

    # In groups: reply only when mentioned
    if chat_type in ("group", "supergroup"):
        if f"@{bot_username}" in txt.lower():
            clean = re.sub(rf"@{re.escape(ctx.bot.username)}", "", txt, flags=re.IGNORECASE).strip()
            if not clean:
                clean = "HELLO"
            update.message.reply_text(spamtonify(clean))
        else:
            return  # stay quiet if not mentioned

    # In private chat: reply to everything
    else:
        update.message.reply_text(spamtonify(txt))

def main():
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN env var missing")
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start_cmd))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
z
